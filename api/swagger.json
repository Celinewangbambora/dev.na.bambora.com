{
    "swagger": "2.0",
    "info": {
        "version": "1.0.0",
        "title": "Bambora Payments API",
        "description": "Bambora Payments API for Q1",
        "contact": {
            "name": "support-to-be-defined@bambora.com"
        },
        "termsOfService": "See http://tbd.bambora.com/terms_of_use",
        "license": {
            "name": "TBD",
            "url": "http://tbd.bambora.com/licenses/LICENSE-1.0.html"
        }
    },
    "schemes": [
        "https",
        "http"
    ],
    "basePath": "/payments",
    "consumes": [
        "application/json"
    ],
    "produces": [
        "application/json",
        "application/problem+json"
    ],
    "paths": {
        "/{payment}/": {
            "get": {
                "operationId": "query_payment",
                "summary": "Retrieve payment information",
                "description": "Query the payment service for information on this payment. Returns payment details and status.\n",
                "tags": [
                    "payments"
                ],
                "parameters": [
                    {
                        "name": "API-Version",
                        "in": "header",
                        "description": "Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.\n",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "Merchant-specific identifier for the payment.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "merchant",
                        "in": "query",
                        "description": "Merchant identifier. Only neccessary if the merchant authentication token is for another merchant in the same corporate hierarchy. The service will validate that the merchant authentication token is authorized to perform the operation.\n",
                        "type": "string",
                        "required": false
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Payment found by query.\n",
                        "schema": {
                            "$ref": "#/definitions/PaymentResponse"
                        }
                    },
                    "default": {
                        "description": "Query failed. A 404 status code is returned when the payment can't be found.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/{payment}/card_token/": {
            "post": {
                "operationId": "authorize_token_payment",
                "summary": "Post payment with card token",
                "description": "Create a new payment authorization using a tokenized payment card.\n",
                "tags": [
                    "payments"
                ],
                "parameters": [
                    {
                        "name": "API-Version",
                        "in": "header",
                        "description": "Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.\n",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "Identifier for the payment. Must be unique for this merchant.\n",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "details",
                        "in": "body",
                        "description": "Payment details",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/TokenAuthorization"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful response - payment created. The amount specified has been approved.\n",
                        "schema": {
                            "$ref": "#/definitions/PaymentResponse"
                        }
                    },
                    "default": {
                        "description": "Unexpected error or card declined. A 402 status code is a declined card of failed payment.\n",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        },
        "/{payment}/capture/": {
            "post": {
                "operationId": "capture_payment",
                "tags": [
                    "payments"
                ],
                "description": "Capture all or a part of the amount specified in the payment.\n",
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "API-Version",
                        "in": "header",
                        "description": "Header to indicate which version of the API this client is using. Only changes when backwards-incompatible modifications are introduced.\n",
                        "type": "integer",
                        "required": true
                    },
                    {
                        "name": "payment",
                        "in": "path",
                        "description": "The payment id of the pre-auth that will be captured.",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "details",
                        "in": "body",
                        "description": "Capture details",
                        "required": false,
                        "schema": {
                            "$ref": "#/definitions/Capture"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successful capture.",
                        "schema": {
                            "$ref": "#/definitions/PaymentResponse"
                        }
                    },
                    "default": {
                        "description": "Unexpected error",
                        "schema": {
                            "$ref": "#/definitions/Error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "Error": {
            "type": "object",
            "properties": {
                "status": {
                    "type": "integer",
                    "format": "int32",
                    "enum": [
                        400,
                        401,
                        402,
                        403,
                        404,
                        409,
                        415,
                        500
                    ],
                    "description": "The HTTP status code is also included in the message body of\nthe response.\n\n400 indicates an invalid request, usually an incorrectly\nformatted request from the client.\n\n401 is an authentication exception, no auth supplied.\n\n402 is a declined payment. The message content was correct,\nhowever.\n\n403 is an authentication (e.g. wrong API key) or\nauthorization exception (e.g. operation not permitted)\n\n404 occurs when a resource cannot be found.\n\n415 incorrect media type supplied in the request.\n\n500 internal server error. These are rare.\n"
                },
                "code": {
                    "type": "integer",
                    "format": "int32",
                    "description": "The code specific to this error. Details of the error can be found in the info field of this message.\n"
                },
                "message": {
                    "type": "string",
                    "description": "The human-readable error message that a developer will see. It is up to the developers to decide if this message should be shown to the user, for example if it is a declined card payment vs. a message formatting error.\n"
                },
                "info": {
                    "type": "string",
                    "description": "A URL link to the support documentation for this particular error.  The URL will have the error code as part of it. For example: http://support.bambora.com/errors/1234\n"
                }
            },
            "required": [
                "status"
            ]
        },
        "TokenAuthorization": {
            "type": "object",
            "required": [
                "currency",
                "amount",
                "token"
            ],
            "properties": {
                "currency": {
                    "type": "string",
                    "description": "Values of: EUR, USD, CAD, GBP, SEK et c. Uses ISO-4217 currency codes.\n",
                    "enum": [
                        "EUR",
                        "USD",
                        "DKK",
                        "CAD",
                        "GBP",
                        "SEK",
                        "AUD",
                        "NZD"
                    ]
                },
                "amount": {
                    "type": "number",
                    "format": "int64",
                    "minimum": 0,
                    "description": "The amount of the payment in the specified currency's cents (or equivalent).\n"
                },
                "token": {
                    "type": "string"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "256 characters of available space for a comment that will be saved on the payment.\n"
                },
                "merchant": {
                    "type": "string",
                    "description": "Merchant identifier. Only neccessary if the merchant authentication token is for another merchant in the same corporate hierarchy. The service will validate that the merchant authentication token is authorized to perform the operation.\n"
                }
            }
        },
        "Capture": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number",
                    "format": "int64",
                    "minimum": 0,
                    "description": "Amount to capture, in cents (or equivalent). If this is less than the amount of the payment, a partial capture will be performed. If this parameter is omitted, the entire amount of the payment will be captured.\n"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "256 characters of available space for a comment that will be saved on the payment.\n"
                }
            },
            "required": [
                "amount"
            ],
            "example": {
                "amount": 1000,
                "comment": "10 EUR capture"
            }
        },
        "PaymentResponse": {
            "type": "object",
            "required": [
                "payment",
                "state"
            ],
            "properties": {
                "region": {
                    "type": "string",
                    "description": "Geographical region of the merchant. Will be the same as the sub-domain of the request.\n",
                    "enum": [
                        "emea_0",
                        "apac_0",
                        "amer_0"
                    ]
                },
                "merchant": {
                    "type": "string",
                    "description": "Identifier of the merchant. Retrieved during onboarding. Will be the same as the host of the request.\n"
                },
                "payment": {
                    "type": "string",
                    "description": "Merchant-specific identifier for the payment."
                },
                "state": {
                    "type": "string",
                    "description": "Set by the system when sent for processing.",
                    "enum": [
                        "None",
                        "Authorized",
                        "Authorization Expired",
                        "Declined",
                        "Voided",
                        "Captured",
                        "Settled"
                    ]
                },
                "currency": {
                    "type": "string",
                    "description": "Values of: EUR, USD, DKK, CAD, GBP, SEK et c. Uses ISO-4217 currency codes.\n",
                    "enum": [
                        "EUR",
                        "USD",
                        "DKK",
                        "CAD",
                        "GBP",
                        "SEK",
                        "AUD",
                        "NZD"
                    ]
                },
                "amount": {
                    "type": "number",
                    "format": "int64",
                    "minimum": 0,
                    "description": "The amount of the payment in the specified currency's cents (or equivalent).\n"
                },
                "comment": {
                    "type": "string",
                    "maxLength": 256,
                    "description": "256 characters of available space for a comment that will be saved on the payment.\n"
                },
                "captures": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/Capture"
                    }
                }
            }
        }
    }
}